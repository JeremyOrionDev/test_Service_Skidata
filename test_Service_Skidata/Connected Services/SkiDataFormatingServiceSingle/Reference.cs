//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SkiData.CP.FormatService.CustomerTestClient.SkiDataFormatingServiceSingle {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SkiDataFormatingServiceSingle.IFormattingService")]
    public interface IFormattingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAccountStatement", ReplyAction="http://tempuri.org/IFormattingService/GetAccountStatementResponse")]
        SkiData.CP.FormatService.Contracts.FormatTypeAccountData[] GetAccountStatement();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAccountStatement", ReplyAction="http://tempuri.org/IFormattingService/GetAccountStatementResponse")]
        System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.FormatTypeAccountData[]> GetAccountStatementAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAllBatches", ReplyAction="http://tempuri.org/IFormattingService/GetAllBatchesResponse")]
        SkiData.CP.FormatService.Contracts.BatchInfoData[] GetAllBatches(bool openOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAllBatches", ReplyAction="http://tempuri.org/IFormattingService/GetAllBatchesResponse")]
        System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.BatchInfoData[]> GetAllBatchesAsync(bool openOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAvailableFormatTypes", ReplyAction="http://tempuri.org/IFormattingService/GetAvailableFormatTypesResponse")]
        SkiData.CP.FormatService.Contracts.FormatTypeData[] GetAvailableFormatTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAvailableFormatTypes", ReplyAction="http://tempuri.org/IFormattingService/GetAvailableFormatTypesResponse")]
        System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.FormatTypeData[]> GetAvailableFormatTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetBatchData", ReplyAction="http://tempuri.org/IFormattingService/GetBatchDataResponse")]
        SkiData.CP.FormatService.Contracts.FormattedData[] GetBatchData(System.Guid batchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetBatchData", ReplyAction="http://tempuri.org/IFormattingService/GetBatchDataResponse")]
        System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.FormattedData[]> GetBatchDataAsync(System.Guid batchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetContingents", ReplyAction="http://tempuri.org/IFormattingService/GetContingentsResponse")]
        SkiData.CP.FormatService.Contracts.ContingentData[] GetContingents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetContingents", ReplyAction="http://tempuri.org/IFormattingService/GetContingentsResponse")]
        System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.ContingentData[]> GetContingentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetSingleUidData", ReplyAction="http://tempuri.org/IFormattingService/GetSingleUidDataResponse")]
        SkiData.CP.FormatService.Contracts.FormattedData GetSingleUidData(ulong uid, System.Guid formatTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetSingleUidData", ReplyAction="http://tempuri.org/IFormattingService/GetSingleUidDataResponse")]
        System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.FormattedData> GetSingleUidDataAsync(ulong uid, System.Guid formatTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetVersion", ReplyAction="http://tempuri.org/IFormattingService/GetVersionResponse")]
        string GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetVersion", ReplyAction="http://tempuri.org/IFormattingService/GetVersionResponse")]
        System.Threading.Tasks.Task<string> GetVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/IsBatchFinished", ReplyAction="http://tempuri.org/IFormattingService/IsBatchFinishedResponse")]
        bool IsBatchFinished(System.Guid batchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/IsBatchFinished", ReplyAction="http://tempuri.org/IFormattingService/IsBatchFinishedResponse")]
        System.Threading.Tasks.Task<bool> IsBatchFinishedAsync(System.Guid batchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/PlaceUidBatch", ReplyAction="http://tempuri.org/IFormattingService/PlaceUidBatchResponse")]
        System.Guid PlaceUidBatch(ulong[] uids, System.Guid formatTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/PlaceUidBatch", ReplyAction="http://tempuri.org/IFormattingService/PlaceUidBatchResponse")]
        System.Threading.Tasks.Task<System.Guid> PlaceUidBatchAsync(ulong[] uids, System.Guid formatTypeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFormattingServiceChannel : SkiData.CP.FormatService.CustomerTestClient.SkiDataFormatingServiceSingle.IFormattingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FormattingServiceClient : System.ServiceModel.ClientBase<SkiData.CP.FormatService.CustomerTestClient.SkiDataFormatingServiceSingle.IFormattingService>, SkiData.CP.FormatService.CustomerTestClient.SkiDataFormatingServiceSingle.IFormattingService {
        
        public FormattingServiceClient() {
        }
        
        public FormattingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FormattingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FormattingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FormattingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SkiData.CP.FormatService.Contracts.FormatTypeAccountData[] GetAccountStatement() {
            return base.Channel.GetAccountStatement();
        }
        
        public System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.FormatTypeAccountData[]> GetAccountStatementAsync() {
            return base.Channel.GetAccountStatementAsync();
        }
        
        public SkiData.CP.FormatService.Contracts.BatchInfoData[] GetAllBatches(bool openOnly) {
            return base.Channel.GetAllBatches(openOnly);
        }
        
        public System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.BatchInfoData[]> GetAllBatchesAsync(bool openOnly) {
            return base.Channel.GetAllBatchesAsync(openOnly);
        }
        
        public SkiData.CP.FormatService.Contracts.FormatTypeData[] GetAvailableFormatTypes() {
            return base.Channel.GetAvailableFormatTypes();
        }
        
        public System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.FormatTypeData[]> GetAvailableFormatTypesAsync() {
            return base.Channel.GetAvailableFormatTypesAsync();
        }
        
        public SkiData.CP.FormatService.Contracts.FormattedData[] GetBatchData(System.Guid batchId) {
            return base.Channel.GetBatchData(batchId);
        }
        
        public System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.FormattedData[]> GetBatchDataAsync(System.Guid batchId) {
            return base.Channel.GetBatchDataAsync(batchId);
        }
        
        public SkiData.CP.FormatService.Contracts.ContingentData[] GetContingents() {
            return base.Channel.GetContingents();
        }
        
        public System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.ContingentData[]> GetContingentsAsync() {
            return base.Channel.GetContingentsAsync();
        }
        
        public SkiData.CP.FormatService.Contracts.FormattedData GetSingleUidData(ulong uid, System.Guid formatTypeId) {
            return base.Channel.GetSingleUidData(uid, formatTypeId);
        }
        
        public System.Threading.Tasks.Task<SkiData.CP.FormatService.Contracts.FormattedData> GetSingleUidDataAsync(ulong uid, System.Guid formatTypeId) {
            return base.Channel.GetSingleUidDataAsync(uid, formatTypeId);
        }
        
        public string GetVersion() {
            return base.Channel.GetVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetVersionAsync() {
            return base.Channel.GetVersionAsync();
        }
        
        public bool IsBatchFinished(System.Guid batchId) {
            return base.Channel.IsBatchFinished(batchId);
        }
        
        public System.Threading.Tasks.Task<bool> IsBatchFinishedAsync(System.Guid batchId) {
            return base.Channel.IsBatchFinishedAsync(batchId);
        }
        
        public System.Guid PlaceUidBatch(ulong[] uids, System.Guid formatTypeId) {
            return base.Channel.PlaceUidBatch(uids, formatTypeId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> PlaceUidBatchAsync(ulong[] uids, System.Guid formatTypeId) {
            return base.Channel.PlaceUidBatchAsync(uids, formatTypeId);
        }
    }
}
