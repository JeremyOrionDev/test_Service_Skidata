//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace test_Service_Skidata.ServiceSkiData {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FormatTypeAccountData", Namespace="http://schemas.datacontract.org/2004/07/SkiData.CP.FormatService.Contracts")]
    [System.SerializableAttribute()]
    public partial class FormatTypeAccountData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private test_Service_Skidata.ServiceSkiData.BookingData[] BookingsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FormatTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public test_Service_Skidata.ServiceSkiData.BookingData[] Bookings {
            get {
                return this.BookingsField;
            }
            set {
                if ((object.ReferenceEquals(this.BookingsField, value) != true)) {
                    this.BookingsField = value;
                    this.RaisePropertyChanged("Bookings");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FormatTypeId {
            get {
                return this.FormatTypeIdField;
            }
            set {
                if ((this.FormatTypeIdField.Equals(value) != true)) {
                    this.FormatTypeIdField = value;
                    this.RaisePropertyChanged("FormatTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BookingData", Namespace="http://schemas.datacontract.org/2004/07/SkiData.CP.FormatService.Contracts")]
    [System.SerializableAttribute()]
    public partial class BookingData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BatchInfoData", Namespace="http://schemas.datacontract.org/2004/07/SkiData.CP.FormatService.Contracts")]
    [System.SerializableAttribute()]
    public partial class BatchInfoData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid BatchIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FormatTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFinishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime PlacedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid BatchId {
            get {
                return this.BatchIdField;
            }
            set {
                if ((this.BatchIdField.Equals(value) != true)) {
                    this.BatchIdField = value;
                    this.RaisePropertyChanged("BatchId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FormatTypeId {
            get {
                return this.FormatTypeIdField;
            }
            set {
                if ((this.FormatTypeIdField.Equals(value) != true)) {
                    this.FormatTypeIdField = value;
                    this.RaisePropertyChanged("FormatTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFinished {
            get {
                return this.IsFinishedField;
            }
            set {
                if ((this.IsFinishedField.Equals(value) != true)) {
                    this.IsFinishedField = value;
                    this.RaisePropertyChanged("IsFinished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Placed {
            get {
                return this.PlacedField;
            }
            set {
                if ((this.PlacedField.Equals(value) != true)) {
                    this.PlacedField = value;
                    this.RaisePropertyChanged("Placed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FormatTypeData", Namespace="http://schemas.datacontract.org/2004/07/SkiData.CP.FormatService.Contracts")]
    [System.SerializableAttribute()]
    public partial class FormatTypeData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DoSetDtaFlagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FormatTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DoSetDtaFlag {
            get {
                return this.DoSetDtaFlagField;
            }
            set {
                if ((this.DoSetDtaFlagField.Equals(value) != true)) {
                    this.DoSetDtaFlagField = value;
                    this.RaisePropertyChanged("DoSetDtaFlag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FormatTypeId {
            get {
                return this.FormatTypeIdField;
            }
            set {
                if ((this.FormatTypeIdField.Equals(value) != true)) {
                    this.FormatTypeIdField = value;
                    this.RaisePropertyChanged("FormatTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FormattedData", Namespace="http://schemas.datacontract.org/2004/07/SkiData.CP.FormatService.Contracts")]
    [System.SerializableAttribute()]
    public partial class FormattedData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private test_Service_Skidata.ServiceSkiData.BlockData[] BlocksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<short> DsfField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ulong UidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public test_Service_Skidata.ServiceSkiData.BlockData[] Blocks {
            get {
                return this.BlocksField;
            }
            set {
                if ((object.ReferenceEquals(this.BlocksField, value) != true)) {
                    this.BlocksField = value;
                    this.RaisePropertyChanged("Blocks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<short> Dsf {
            get {
                return this.DsfField;
            }
            set {
                if ((this.DsfField.Equals(value) != true)) {
                    this.DsfField = value;
                    this.RaisePropertyChanged("Dsf");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Uid {
            get {
                return this.UidField;
            }
            set {
                if ((this.UidField.Equals(value) != true)) {
                    this.UidField = value;
                    this.RaisePropertyChanged("Uid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlockData", Namespace="http://schemas.datacontract.org/2004/07/SkiData.CP.FormatService.Contracts")]
    [System.SerializableAttribute()]
    public partial class BlockData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BlockNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BlockValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BlockNumber {
            get {
                return this.BlockNumberField;
            }
            set {
                if ((this.BlockNumberField.Equals(value) != true)) {
                    this.BlockNumberField = value;
                    this.RaisePropertyChanged("BlockNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BlockValue {
            get {
                return this.BlockValueField;
            }
            set {
                if ((object.ReferenceEquals(this.BlockValueField, value) != true)) {
                    this.BlockValueField = value;
                    this.RaisePropertyChanged("BlockValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContingentData", Namespace="http://schemas.datacontract.org/2004/07/SkiData.CP.FormatService.Contracts")]
    [System.SerializableAttribute()]
    public partial class ContingentData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FormatTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FormatTypeId {
            get {
                return this.FormatTypeIdField;
            }
            set {
                if ((this.FormatTypeIdField.Equals(value) != true)) {
                    this.FormatTypeIdField = value;
                    this.RaisePropertyChanged("FormatTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceSkiData.IFormattingService")]
    public interface IFormattingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAccountStatement", ReplyAction="http://tempuri.org/IFormattingService/GetAccountStatementResponse")]
        test_Service_Skidata.ServiceSkiData.FormatTypeAccountData[] GetAccountStatement();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAccountStatement", ReplyAction="http://tempuri.org/IFormattingService/GetAccountStatementResponse")]
        System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.FormatTypeAccountData[]> GetAccountStatementAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAllBatches", ReplyAction="http://tempuri.org/IFormattingService/GetAllBatchesResponse")]
        test_Service_Skidata.ServiceSkiData.BatchInfoData[] GetAllBatches(bool openOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAllBatches", ReplyAction="http://tempuri.org/IFormattingService/GetAllBatchesResponse")]
        System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.BatchInfoData[]> GetAllBatchesAsync(bool openOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAvailableFormatTypes", ReplyAction="http://tempuri.org/IFormattingService/GetAvailableFormatTypesResponse")]
        test_Service_Skidata.ServiceSkiData.FormatTypeData[] GetAvailableFormatTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetAvailableFormatTypes", ReplyAction="http://tempuri.org/IFormattingService/GetAvailableFormatTypesResponse")]
        System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.FormatTypeData[]> GetAvailableFormatTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetBatchData", ReplyAction="http://tempuri.org/IFormattingService/GetBatchDataResponse")]
        test_Service_Skidata.ServiceSkiData.FormattedData[] GetBatchData(System.Guid batchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetBatchData", ReplyAction="http://tempuri.org/IFormattingService/GetBatchDataResponse")]
        System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.FormattedData[]> GetBatchDataAsync(System.Guid batchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetContingents", ReplyAction="http://tempuri.org/IFormattingService/GetContingentsResponse")]
        test_Service_Skidata.ServiceSkiData.ContingentData[] GetContingents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetContingents", ReplyAction="http://tempuri.org/IFormattingService/GetContingentsResponse")]
        System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.ContingentData[]> GetContingentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetSingleUidData", ReplyAction="http://tempuri.org/IFormattingService/GetSingleUidDataResponse")]
        test_Service_Skidata.ServiceSkiData.FormattedData GetSingleUidData(ulong uid, System.Guid formatTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetSingleUidData", ReplyAction="http://tempuri.org/IFormattingService/GetSingleUidDataResponse")]
        System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.FormattedData> GetSingleUidDataAsync(ulong uid, System.Guid formatTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetVersion", ReplyAction="http://tempuri.org/IFormattingService/GetVersionResponse")]
        string GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/GetVersion", ReplyAction="http://tempuri.org/IFormattingService/GetVersionResponse")]
        System.Threading.Tasks.Task<string> GetVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/IsBatchFinished", ReplyAction="http://tempuri.org/IFormattingService/IsBatchFinishedResponse")]
        bool IsBatchFinished(System.Guid batchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/IsBatchFinished", ReplyAction="http://tempuri.org/IFormattingService/IsBatchFinishedResponse")]
        System.Threading.Tasks.Task<bool> IsBatchFinishedAsync(System.Guid batchId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/PlaceUidBatch", ReplyAction="http://tempuri.org/IFormattingService/PlaceUidBatchResponse")]
        System.Guid PlaceUidBatch(ulong[] uids, System.Guid formatTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFormattingService/PlaceUidBatch", ReplyAction="http://tempuri.org/IFormattingService/PlaceUidBatchResponse")]
        System.Threading.Tasks.Task<System.Guid> PlaceUidBatchAsync(ulong[] uids, System.Guid formatTypeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFormattingServiceChannel : test_Service_Skidata.ServiceSkiData.IFormattingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FormattingServiceClient : System.ServiceModel.ClientBase<test_Service_Skidata.ServiceSkiData.IFormattingService>, test_Service_Skidata.ServiceSkiData.IFormattingService {
        
        public FormattingServiceClient() {
        }
        
        public FormattingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FormattingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FormattingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FormattingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public test_Service_Skidata.ServiceSkiData.FormatTypeAccountData[] GetAccountStatement() {
            return base.Channel.GetAccountStatement();
        }
        
        public System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.FormatTypeAccountData[]> GetAccountStatementAsync() {
            return base.Channel.GetAccountStatementAsync();
        }
        
        public test_Service_Skidata.ServiceSkiData.BatchInfoData[] GetAllBatches(bool openOnly) {
            return base.Channel.GetAllBatches(openOnly);
        }
        
        public System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.BatchInfoData[]> GetAllBatchesAsync(bool openOnly) {
            return base.Channel.GetAllBatchesAsync(openOnly);
        }
        
        public test_Service_Skidata.ServiceSkiData.FormatTypeData[] GetAvailableFormatTypes() {
            return base.Channel.GetAvailableFormatTypes();
        }
        
        public System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.FormatTypeData[]> GetAvailableFormatTypesAsync() {
            return base.Channel.GetAvailableFormatTypesAsync();
        }
        
        public test_Service_Skidata.ServiceSkiData.FormattedData[] GetBatchData(System.Guid batchId) {
            return base.Channel.GetBatchData(batchId);
        }
        
        public System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.FormattedData[]> GetBatchDataAsync(System.Guid batchId) {
            return base.Channel.GetBatchDataAsync(batchId);
        }
        
        public test_Service_Skidata.ServiceSkiData.ContingentData[] GetContingents() {
            return base.Channel.GetContingents();
        }
        
        public System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.ContingentData[]> GetContingentsAsync() {
            return base.Channel.GetContingentsAsync();
        }
        
        public test_Service_Skidata.ServiceSkiData.FormattedData GetSingleUidData(ulong uid, System.Guid formatTypeId) {
            return base.Channel.GetSingleUidData(uid, formatTypeId);
        }
        
        public System.Threading.Tasks.Task<test_Service_Skidata.ServiceSkiData.FormattedData> GetSingleUidDataAsync(ulong uid, System.Guid formatTypeId) {
            return base.Channel.GetSingleUidDataAsync(uid, formatTypeId);
        }
        
        public string GetVersion() {
            return base.Channel.GetVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetVersionAsync() {
            return base.Channel.GetVersionAsync();
        }
        
        public bool IsBatchFinished(System.Guid batchId) {
            return base.Channel.IsBatchFinished(batchId);
        }
        
        public System.Threading.Tasks.Task<bool> IsBatchFinishedAsync(System.Guid batchId) {
            return base.Channel.IsBatchFinishedAsync(batchId);
        }
        
        public System.Guid PlaceUidBatch(ulong[] uids, System.Guid formatTypeId) {
            return base.Channel.PlaceUidBatch(uids, formatTypeId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> PlaceUidBatchAsync(ulong[] uids, System.Guid formatTypeId) {
            return base.Channel.PlaceUidBatchAsync(uids, formatTypeId);
        }
    }
}
